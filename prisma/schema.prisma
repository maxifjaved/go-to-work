generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Static Enums
enum CustomFieldType {
  Text
  Number
  Date
  Select
  MultiSelect
  User
  URL
}

enum CustomFieldEntityType {
  Task
  Project
  Epic
  Sprint
}

enum AutomationOperator {
  equals
  not_equals
  contains
  greater_than
  less_than
}

enum UserStatus {
  Active
  Away
  Offline
  DoNotDisturb
}

enum NotificationFrequency {
  Instant
  Daily
  Weekly
}

enum ThemeType {
  Light
  Dark
  System
}

enum ViewType {
  List
  Board
  Calendar
}

enum TimeFormat {
  h12
  h24
}

enum Environment {
  Development
  Staging
  Production
}

enum IntegrationStatus {
  Active
  Inactive
}

enum TaskActivityAction {
  created
  updated
  commented
  status_changed
  assigned
}

enum TaskRelationship {
  relates_to
  duplicates
  blocks
  is_blocked_by
  implements
  fixes
}

// Dynamic Reference Tables
model PriorityType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  color       String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?      // Optional to allow global types
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  tasks       Task[]
  epics       Epic[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model StatusType {
  id              Int       @id @default(autoincrement())
  name            String
  description     String?
  color           String?
  icon            String?
  category        String    // e.g., "Todo", "In Progress", "Done"
  order           Int       @default(0)
  isActive        Boolean   @default(true)
  projectId       Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  deletedBy       Int?
  isDeleted       Boolean   @default(false)
  version         Int       @default(1)
  tasks           Task[]
  customStatuses  TaskCustomStatus[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model TaskType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  color       String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  tasks       Task[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model VisibilityType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  projects    Project[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model SprintStatusType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  color       String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  sprints     Sprint[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model ProjectStatusType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  color       String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  projects    Project[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model RiskLevelType {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  color            String?
  order            Int       @default(0)
  isActive         Boolean   @default(true)
  projectId        Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  deletedBy        Int?
  isDeleted        Boolean   @default(false)
  version          Int       @default(1)
  risksImpact      Risk[]    @relation("RiskImpact")
  risksProbability Risk[]    @relation("RiskProbability")

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model RiskStatusType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  color       String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  risks       Risk[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model EpicStatusType {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  color       String?
  icon        String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  projectId   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)
  epics       Epic[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model MilestoneStatusType {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  color       String?
  icon        String?
  order       Int         @default(0)
  isActive    Boolean     @default(true)
  projectId   Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean     @default(false)
  version     Int         @default(1)
  milestones  Milestone[]

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

// Core Models
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  title         String?
  designation   String?
  age           Int?
  address       String?
  language      String?
  timeZone      String
  role          String
  department    String?
  avatar        String?
  status        UserStatus
  lastActive    DateTime?
  skills        String[]
  version       Int       @default(1)
  lastApiCall   DateTime?
  apiCallCount  Int       @default(0)
  rateLimitTier String    @default("standard")
  workSchedule  WorkSchedule?
  preferences   UserPreferences?
  lastLoginAt   DateTime?
  lastLogoutAt  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  deletedBy     Int?
  isDeleted     Boolean   @default(false)
  isActive      Boolean   @default(true)
  isAdmin       Boolean   @default(false)
  isSuperAdmin  Boolean   @default(false)
  
  // Relations
  projectsOwned     Project[]
  teams             TeamMember[]
  assignedTasks     Task[]          @relation("TaskAssignee")
  reportedTasks     Task[]          @relation("TaskReporter")
  comments          Comment[]
  timeEntries       TimeEntry[]
  ownedEpics        Epic[]
  taskActivities    TaskActivity[]
  ownedMilestones   Milestone[]
  ownedRisks        Risk[]
  auditLogs         AuditLog[]

  @@index([email])
  @@index([status])
  @@index([isActive])
  @@index([isDeleted])
}

model WorkSchedule {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id])
  start       String
  end         String
  timeZone    String
  daysOfWeek  Boolean[]
  holidays    String[]
  version     Int          @default(1)
  vacations   Vacation[]
}

model Vacation {
  id              Int          @id @default(autoincrement())
  workScheduleId  Int
  workSchedule    WorkSchedule @relation(fields: [workScheduleId], references: [id])
  start           DateTime
  end             DateTime
  type            String
  version         Int          @default(1)

  @@check(end > start)
}

model UserPreferences {
  id                    Int                   @id @default(autoincrement())
  userId                Int                   @unique
  user                  User                  @relation(fields: [userId], references: [id])
  emailNotification     Boolean               @default(true)
  pushNotification      Boolean               @default(true)
  desktopNotification   Boolean               @default(true)
  notificationFrequency NotificationFrequency @default(Daily)
  notificationTypes     String[]
  theme                 ThemeType             @default(System)
  defaultView          ViewType              @default(Board)
  timeFormat           TimeFormat            @default(h24)
  defaultDashboard     String?
  version              Int                    @default(1)
}

model Task {
  id                    Int          @id @default(autoincrement())
  title                 String
  description          String        @db.Text
  statusId             Int
  status               StatusType    @relation(fields: [statusId], references: [id])
  statusOrder          Int           @default(0)
  priorityId           Int
  priority             PriorityType  @relation(fields: [priorityId], references: [id])
  priorityOrder        Int           @default(0)
  typeId               Int
  type                 TaskType      @relation(fields: [typeId], references: [id])
  version              Int           @default(1)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  deletedAt            DateTime?
  deletedBy            Int?
  isDeleted            Boolean       @default(false)
  dueDate              DateTime?
  dueTime              String?
  estimatedHours       Float         @db.Decimal(10,2)
  actualHours          Float         @db.Decimal(10,2)
  cycleTime            Float?
  leadTime             Float?
  assigneeId           Int?
  assignee             User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  reporterId           Int?
  reporter             User?         @relation("TaskReporter", fields: [reporterId], references: [id])
  projectId            Int?
  project              Project?      @relation(fields: [projectId], references: [id])
  sprintId             Int?
  sprint               Sprint?       @relation(fields: [sprintId], references: [id])
  epicId               Int?
  epic                 Epic?         @relation(fields: [epicId], references: [id])
  parentTaskId         Int?
  parentTask           Task?         @relation("TaskSubtasks", fields: [parentTaskId], references: [id])
  subtasks             Task[]        @relation("TaskSubtasks")
  blockingTasks        Task[]        @relation("TaskBlocking")
  blockedByTasks       Task[]        @relation("TaskBlocking")
  watchers             Int[]
  progress             Float         @default(0)
  storyPoints          Float?
  originalEstimate     Float?
  remainingEstimate    Float?
  environment          Environment?
  startDate            DateTime?
  completedAt          DateTime?
  estimatedCompletionDate DateTime?
  weight               Float         @default(1.0)
  order                Int          @default(0)
  key                  String
  timeZone             String?
  lastViewedAt         DateTime?
  subscribedUsers      Int[]
  isFlagged           Boolean       @default(false)
  isStarred           Boolean       @default(false)
  reminderSet          Boolean       @default(false)
  reminderTime         DateTime?
  isRecurring          Boolean       @default(false)
  isBlocked            Boolean       @default(false)

  // Relations
  customFields         CustomFieldValue[]
  comments             Comment[]         @relation(onDelete: Cascade)
  attachments          Attachment[]      @relation(onDelete: Cascade)
  timeEntries          TimeEntry[]       @relation(onDelete: Cascade)
  linkedTasks          TaskLink[]        @relation(onDelete: Cascade)
  activities           TaskActivity[]    @relation(onDelete: Cascade)
  customStatus         TaskCustomStatus? @relation(fields: [customStatusId], references: [id])
  customStatusId       Int?
  recurringPattern     RecurringPattern?
  labels               Label[]
  dependencies         Dependency[]      @relation("SourceTask")
  dependentOn          Dependency[]      @relation("TargetTask")

  @@index([assigneeId, statusId, isDeleted])
  @@index([projectId, statusId, isDeleted])
  @@index([sprintId, assigneeId, statusId])
  @@index([epicId, isDeleted])
  @@index([dueDate])
  @@index([createdAt])
  @@check(estimatedHours >= 0)
  @@check(actualHours >= 0)
  @@check(progress >= 0 && progress <= 100)
  @@check(storyPoints >= 0)
  @@check(weight > 0)
}

model TaskCustomStatus {
  id          Int          @id @default(autoincrement())
  name        String
  color       String
  statusId    Int
  status      StatusType   @relation(fields: [statusId], references: [id])
  description String?
  icon        String?
  order       Int          @default(0)
  projectId   Int
  project     Project      @relation(fields: [projectId], references: [id])
  tasks       Task[]
  version     Int          @default(1)
  
  @@unique([name, projectId])
  @@index([projectId])
  @@index([statusId])
}

model TaskLink {
  id            Int              @id @default(autoincrement())
  taskId        Int
  task          Task             @relation(fields: [taskId], references: [id])
  linkedTaskId  Int
  relationship  TaskRelationship
  version       Int              @default(1)

  @@index([taskId])
  @@index([linkedTaskId])
}

model TaskActivity {
  id        Int                @id @default(autoincrement())
  taskId    Int
  task      Task               @relation(fields: [taskId], references: [id])
  userId    Int
  user      User               @relation(fields: [userId], references: [id])
  action    TaskActivityAction
  details   Json?
  createdAt DateTime           @default(now())
  version   Int                @default(1)

  @@index([taskId])
  @@index([userId])
  @@index([createdAt])
}

model Comment {
  id              Int          @id @default(autoincrement())
  taskId          Int
  task            Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId          Int
  user            User         @relation(fields: [userId], references: [id])
  content         String       @db.Text
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  deletedBy       Int?
  isDeleted       Boolean      @default(false)
  mentions        Int[]
  isEdited        Boolean      @default(false)
  parentCommentId Int?
  parentComment   Comment?     @relation("CommentReplies", fields: [parentCommentId], references: [id])
  childComments   Comment[]    @relation("CommentReplies")
  version         Int          @default(1)
  attachments     Attachment[] @relation(onDelete: Cascade)
  reactions       Reaction[]   @relation(onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([parentCommentId])
  @@index([isDeleted])
}

model Attachment {
  id            Int       @id @default(autoincrement())
  name          String
  url           String
  type          String
  size          Int
  uploadedBy    Int
  uploadedAt    DateTime  @default(now())
  deletedAt     DateTime?
  deletedBy     Int?
  isDeleted     Boolean   @default(false)
  version       Int       @default(1)
  taskId        Int?
  task          Task?     @relation(fields: [taskId], references: [id])
  commentId     Int?
  comment       Comment?  @relation(fields: [commentId], references: [id])

  @@index([taskId])
  @@index([commentId])
  @@index([isDeleted])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  userId    Int
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  version   Int      @default(1)

  @@index([commentId])
  @@index([userId])
}

model RecurringPattern {
  id                    Int      @id @default(autoincrement())
  taskId                Int      @unique
  task                  Task     @relation(fields: [taskId], references: [id])
  frequency             String
  interval              Int
  endDate              DateTime?
  endAfterOccurrences  Int?
  daysOfWeek           Int[]
  monthDay             Int?
  weekNumber           Int?
  version              Int      @default(1)
}

model TimeEntry {
  id          Int      @id @default(autoincrement())
  taskId      Int
  task        Task     @relation(fields: [taskId], references: [id])
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime?
  duration    Int
  description String?
  billable    Boolean  @default(false)
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isRunning   Boolean  @default(false)
  version     Int      @default(1)

  @@index([taskId])
  @@index([userId])
  @@check(duration >= 0)
  @@check(endTime > startTime)
}

model Sprint {
  id                  Int              @id @default(autoincrement())
  name                String
  goal                String?
  startDate           DateTime
  endDate             DateTime
  statusId            Int
  status              SprintStatusType @relation(fields: [statusId], references: [id])
  projectId           Int
  project             Project          @relation(fields: [projectId], references: [id])
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  deletedBy           Int?
  isDeleted           Boolean          @default(false)
  createdBy           Int
  order               Int              @default(0)
  version             Int              @default(1)
  metrics             Json
  tasks               Task[]

  @@index([projectId])
  @@index([statusId])
  @@index([isDeleted])
  @@check(endDate > startDate)
}

model Epic {
  id                Int              @id @default(autoincrement())
  title             String
  description       String           @db.Text
  statusId          Int
  status            EpicStatusType   @relation(fields: [statusId], references: [id])
  startDate         DateTime
  targetDate        DateTime
  projectId         Int
  project           Project          @relation(fields: [projectId], references: [id])
  progress          Float            @default(0)
  ownerId           Int
  owner             User             @relation(fields: [ownerId], references: [id])
  priorityId        Int
  priority          PriorityType     @relation(fields: [priorityId], references: [id])
  priorityOrder     Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  deletedBy         Int?
  isDeleted         Boolean          @default(false)
  version           Int              @default(1)
  order             Int              @default(0)
  key               String
  dependencies      Int[]
  customFields      CustomFieldValue[]
  tasks             Task[]

  @@index([projectId])
  @@index([statusId])
  @@index([ownerId])
  @@index([isDeleted])
  @@check(progress >= 0 && progress <= 100)
  @@check(targetDate > startDate)
}

model Project {
  id                  Int               @id @default(autoincrement())
  name                String
  description         String            @db.Text
  key                 String            @unique
  visibilityId        Int
  visibility          VisibilityType    @relation(fields: [visibilityId], references: [id])
  category            String?
  department          String?
  statusId            Int
  status              ProjectStatusType @relation(fields: [statusId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?
  deletedBy           Int?
  isDeleted           Boolean           @default(false)
  isArchived          Boolean           @default(false)
  archivedAt          DateTime?
  archivedBy          Int?
  version             Int               @default(1)
  startDate           DateTime
  endDate             DateTime?
  ownerId             Int
  owner               User              @relation(fields: [ownerId], references: [id])
  team                TeamMember[]
  epics               Epic[]            @relation(onDelete: Cascade)
  sprints             Sprint[]          @relation(onDelete: Cascade)
  tasks               Task[]            @relation(onDelete: Cascade)
  tags                String[]
  customFields        CustomFieldValue[]
  settings            Json
  budget              Json?
  milestones          Milestone[]       @relation(onDelete: Cascade)
  risks               Risk[]            @relation(onDelete: Cascade)
  customStatuses      TaskCustomStatus[]
  integrations        Integration[]     @relation(onDelete: Cascade)
  automations         Automation[]      @relation(onDelete: Cascade)
  isTemplate          Boolean           @default(false)
  teams               Team[]
  labels              Label[]
  metrics             ProjectMetrics?

  @@index([ownerId])
  @@index([statusId])
  @@index([department])
  @@index([isDeleted])
  @@index([isArchived])
}

model ProjectMetrics {
  id                Int      @id @default(autoincrement())
  projectId         Int      @unique
  project           Project  @relation(fields: [projectId], references: [id])
  velocityData      Json     
  cycleTimeAvg      Float
  leadTimeAvg       Float
  throughput        Float
  qualityMetrics    Json     
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  version           Int      @default(1)

  @@check(cycleTimeAvg >= 0)
  @@check(leadTimeAvg >= 0)
  @@check(throughput >= 0)
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean      @default(false)
  version     Int          @default(1)
  members     TeamMember[]
  projects    Project[]

  @@index([isDeleted])
}

model TeamMember {
  id            Int       @id @default(autoincrement())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  teamId        Int
  team          Team      @relation(fields: [teamId], references: [id])
  projectId     Int?
  project       Project?  @relation(fields: [projectId], references: [id])
  role          String
  permissions   String[]
  joinedAt      DateTime  @default(now())
  lastActiveAt  DateTime?
  version       Int       @default(1)

  @@unique([userId, teamId, projectId])
  @@index([userId])
  @@index([teamId])
  @@index([projectId])
}

model CustomField {
  id            Int                   @id @default(autoincrement())
  name          String
  type          CustomFieldType
  options       String[]
  required      Boolean               @default(false)
  entityType    CustomFieldEntityType
  defaultValue  Json?
  order         Int                   @default(0)
  isActive      Boolean               @default(true)
  version       Int                   @default(1)
  values        CustomFieldValue[]
}

model CustomFieldValue {
  id            Int          @id @default(autoincrement())
  fieldId       Int
  field         CustomField  @relation(fields: [fieldId], references: [id])
  value         Json
  taskId        Int?
  task          Task?        @relation(fields: [taskId], references: [id])
  projectId     Int?
  project       Project?     @relation(fields: [projectId], references: [id])
  epicId        Int?
  epic          Epic?        @relation(fields: [epicId], references: [id])
  version       Int          @default(1)

  @@index([fieldId])
  @@index([taskId])
  @@index([projectId])
  @@index([epicId])
}

model Label {
  id          Int       @id @default(autoincrement())
  name        String
  color       String
  description String?
  projectId   Int?
  project     Project?  @relation(fields: [projectId], references: [id])
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)
  version     Int       @default(1)

  @@unique([name, projectId])
  @@index([projectId])
  @@index([isDeleted])
}

model Milestone {
  id          Int                   @id @default(autoincrement())
  name        String
  description String?               @db.Text
  dueDate     DateTime
  statusId    Int
  status      MilestoneStatusType  @relation(fields: [statusId], references: [id])
  progress    Float                @default(0)
  tasks       Int[]
  dependencies Int[]
  ownerId     Int
  owner       User                 @relation(fields: [ownerId], references: [id])
  budget      Float?
  actualCost  Float?
  projectId   Int
  project     Project              @relation(fields: [projectId], references: [id])
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean              @default(false)
  version     Int                  @default(1)

  @@index([projectId])
  @@index([statusId])
  @@index([ownerId])
  @@index([isDeleted])
  @@check(progress >= 0 && progress <= 100)
  @@check(actualCost >= 0)
}

model Risk {
  id              Int             @id @default(autoincrement())
  description     String          @db.Text
  probabilityId   Int
  probability     RiskLevelType   @relation("RiskProbability", fields: [probabilityId], references: [id])
  impactId        Int
  impact          RiskLevelType   @relation("RiskImpact", fields: [impactId], references: [id])
  mitigationPlan  String          @db.Text
  statusId        Int
  status          RiskStatusType  @relation(fields: [statusId], references: [id])
  ownerId         Int
  owner           User            @relation(fields: [ownerId], references: [id])
  projectId       Int
  project         Project         @relation(fields: [projectId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  deletedBy       Int?
  isDeleted       Boolean         @default(false)
  version         Int             @default(1)

  @@index([projectId])
  @@index([ownerId])
  @@index([statusId])
  @@index([isDeleted])
}

model Integration {
  id          Int               @id @default(autoincrement())
  type        String
  config      Json              // Storing configuration as JSON
  status      IntegrationStatus
  lastSyncAt  DateTime?
  errors      String[]
  projectId   Int
  project     Project          @relation(fields: [projectId], references: [id])
  version     Int              @default(1)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean          @default(false)

  @@index([projectId])
  @@index([type])
  @@index([status])
  @@index([isDeleted])
}

model Automation {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  trigger     Json      // Storing trigger configuration as JSON
  actions     Json      // Storing actions as JSON
  isActive    Boolean   @default(true)
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastRunAt   DateTime?
  runCount    Int       @default(0)
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  version     Int       @default(1)
  deletedAt   DateTime?
  deletedBy   Int?
  isDeleted   Boolean   @default(false)

  @@index([projectId])
  @@index([isActive])
  @@index([isDeleted])
}

model Dependency {
  id              Int      @id @default(autoincrement())
  sourceTaskId    Int
  sourceTask      Task     @relation("SourceTask", fields: [sourceTaskId], references: [id])
  targetTaskId    Int
  targetTask      Task     @relation("TargetTask", fields: [targetTaskId], references: [id])
  type            String   
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  version         Int      @default(1)

  @@unique([sourceTaskId, targetTaskId])
  @@index([sourceTaskId])
  @@index([targetTaskId])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  entityType  String   
  entityId    Int
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  action      String
  changes     Json
  ipAddress   String?
  userAgent   String?
  metadata    Json?    // Additional context
  createdAt   DateTime @default(now())
  version     Int      @default(1)
  
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
}